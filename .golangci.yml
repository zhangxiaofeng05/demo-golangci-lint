version: "2"
linters:
  # Default set of linters.
  # The value can be:
  # - `standard`: https://golangci-lint.run/usage/linters/#enabled-by-default
  # - `all`: enables all linters by default.
  # - `none`: disables all linters by default.
  # - `fast`: enables only linters considered as "fast" (`golangci-lint help linters --json | jq '[ .[] | select(.fast==true) ] | map(.name)'`).
  # Default: standard
  default: standard
  # Enable specific linter.
  enable:
    - errcheck # 用于检查 Go 代码中未检查错误的程序
    - govet # 与 go vet 大致相同
    - ineffassign # 检测现有变量的赋值何时未被使用
    - staticcheck # 静态检查
    - asasalint # 检查可变函数 (...any) 中传递 []any 为 any
    - asciicheck # 检查所有代码标识符的名称中不包含非 ASCII 符号
    - bidichk # 检查危险的 Unicode 字符序列
    - bodyclose # 检查 HTTP 响应主体是否成功关闭
    - copyloopvar # 检测循环变量被复制的位置
    - dogsled # 检查具有过多空白标识符的赋值
    - durationcheck # 检查两个持续时间是否相乘
    - errchkjson # 检查传递给 JSON 编码函数的类型
    - errorlint # 用于查找会导致 Go 1.13 中引入的错误包装方案出现问题的代码
    - exhaustive # 检查枚举 switch 语句的详尽性
    - exhaustruct # 检查所有结构字段是否已初始化
    - exptostd # 检测 golang.org/x/exp/ 中可被 std 函数替换的函数
    - forbidigo #  禁止标识符
    - forcetypeassert # 查找强制类型断言
    - gosec # 检查源代码是否存在安全问题
    - makezero # 查找具有非零初始长度的切片声明
    - nilerr # 查找即使检查错误不为 nil 也返回 nil 的代码
    - nilnesserr # 报告构造检查 err != nil，但返回不同的 nil 值错误
    - nilnil # 检查是否不同时返回 nil 错误和无效值
    - nolintlint # 报告格式不正确或不充分的 nolint 指令
    - perfsprint # 检查 fmt.Sprintf 是否可以被更快的替代方案取代
    - prealloc # 查找可能预先分配的切片声明
    #    - revive # 快速、可配置、可扩展、灵活且美观的 Go 语言代码检查器。golint 的直接替代品 ** 不启用
    - rowserrcheck # 检查行的 Rows.Err 是否检查成功
    - sqlclosecheck # 检查 sql.Rows、sql.Stmt、sqlx.NamedStmt、pgx.Query 是否已关闭
    - testifylint # 检查 github.com/stretchr/testify 的使用情况
    - unconvert # 删除不必要的类型转换
    - usestdlibvars # 检测使用 Go 标准库中的变量/常量的可能性的 linter
    - wastedassign # 查找浪费的赋值语句
  settings:
    gosec:
      includes:
        - G102
        - G106
        - G108
        - G109
        - G111
        - G112
        - G201
        - G203
  disable:
    - unused
